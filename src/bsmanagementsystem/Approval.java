 /*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bsmanagementsystem;

import DBConnect.DBconnect;
import classes.approval;
import classes.validations;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import jdk.internal.dynalink.support.AutoDiscovery;
import net.proteanit.sql.DbUtils;



/**
 *
 * @author Rashan
 */

public class Approval extends javax.swing.JFrame {

    //approval app = new approval();
    
    
    Connection con = null;
    PreparedStatement pst=null;
    ResultSet rs = null;
   
    private String cat,Sdate,Edate;
    /*combi1;
    private String comb = null;
    private String btwn = " - ";
    private String space = " ";*/
    String cat1;
    String start1;
    String end1;
    String date;
    
    public Approval() {
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jDateChooser2 = new com.toedter.calendar.JDateChooser();
        jButton2 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(1366, 768));
        setMinimumSize(new java.awt.Dimension(1366, 768));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton1.setText("Back");
        jButton1.setMaximumSize(new java.awt.Dimension(188, 54));
        jButton1.setMinimumSize(new java.awt.Dimension(188, 54));
        jButton1.setPreferredSize(new java.awt.Dimension(188, 54));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1230, 30, 120, 46));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.setEnabled(false);
        jTable1.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                jTable1ComponentAdded(evt);
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 140, 820, 513));

        jComboBox1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Please Select", "Administration Expenses", "Petty Cash Expenses", "Maintenance Expenses", "Other Expenses" }));
        jComboBox1.setMaximumSize(new java.awt.Dimension(216, 54));
        jComboBox1.setMinimumSize(new java.awt.Dimension(216, 54));
        jComboBox1.setPreferredSize(new java.awt.Dimension(216, 54));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(214, 196, -1, -1));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 22)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Approvals");
        jLabel2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jLabel2.setMaximumSize(new java.awt.Dimension(216, 54));
        jLabel2.setMinimumSize(new java.awt.Dimension(216, 54));
        jLabel2.setPreferredSize(new java.awt.Dimension(216, 54));
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 50, -1, -1));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Category");
        jLabel1.setMaximumSize(new java.awt.Dimension(188, 54));
        jLabel1.setMinimumSize(new java.awt.Dimension(188, 54));
        jLabel1.setPreferredSize(new java.awt.Dimension(188, 54));
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(14, 195, -1, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Period");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(14, 314, 188, 57));

        jTextField1.setEditable(false);
        getContentPane().add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(214, 321, 216, 46));

        jDateChooser1.setDateFormatString("yyyy-MM-dd");
        jDateChooser1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jDateChooser1.setMinimumSize(new java.awt.Dimension(216, 50));
        jDateChooser1.setPreferredSize(new java.awt.Dimension(216, 50));
        getContentPane().add(jDateChooser1, new org.netbeans.lib.awtextra.AbsoluteConstraints(214, 424, -1, -1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Start");
        jLabel5.setMaximumSize(new java.awt.Dimension(188, 54));
        jLabel5.setMinimumSize(new java.awt.Dimension(188, 54));
        jLabel5.setPreferredSize(new java.awt.Dimension(188, 54));
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(73, 438, 91, 29));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("End");
        jLabel4.setMaximumSize(new java.awt.Dimension(188, 54));
        jLabel4.setMinimumSize(new java.awt.Dimension(188, 54));
        jLabel4.setPreferredSize(new java.awt.Dimension(188, 54));
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(73, 515, 91, 29));

        jDateChooser2.setDateFormatString("yyyy-MM-dd");
        jDateChooser2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jDateChooser2.setMaximumSize(new java.awt.Dimension(105, 22));
        jDateChooser2.setMinimumSize(new java.awt.Dimension(105, 22));
        getContentPane().add(jDateChooser2, new org.netbeans.lib.awtextra.AbsoluteConstraints(214, 492, 216, 49));

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton2.setText("Show");
        jButton2.setMaximumSize(new java.awt.Dimension(188, 54));
        jButton2.setMinimumSize(new java.awt.Dimension(188, 54));
        jButton2.setPreferredSize(new java.awt.Dimension(188, 54));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(177, 630, 130, 36));

        jLabel6.setIcon(new javax.swing.ImageIcon("C:\\Users\\Rashan\\Desktop\\ITP\\Design\\backgrnd1.png")); // NOI18N
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -2, -1, 770));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        new FinanceMain().setVisible(true);
        this.dispose();
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
       approval ap = new approval();
       try{ 
        Sdate = getStartDate();
        Edate = getEndDate();
        String m = getMonthStart();
        //String m1,m2,m3;
        String m4 = getMonthEnd();
        
      
        String dis = ap.concat(Sdate,Edate,m,m4);
       
        jTextField1.setText(dis);
        resetTable();
        tableLoad(this.getCat());
       }
       catch (Exception e){
           System.out.println(e);
            new validations().validateApproval();
       }
       //boolean validateApproval = val.validateApproval();
        /*if (validateApproval != false){
        
        
        }*/
      //tableLoadQuery();
      /*  showTable();
        int row = 0; /*=jTable1.getSelectedRow();
        int lrow = jTable1.getRowCount();
        int strt,end;
          
       strt = this.getCorectStrtrow(row,lrow);
       end = this.getCorectEndrow(row, lrow);
       
       loadT(strt,end);*/
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        showTable();
    }//GEN-LAST:event_jComboBox1ActionPerformed

    @SuppressWarnings("empty-statement")
    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
       
    }//GEN-LAST:event_jTable1MouseClicked

    private void jTable1ComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_jTable1ComponentAdded
        
    }//GEN-LAST:event_jTable1ComponentAdded
    
    public final void tableLoad(String cat2){
             
          String s = this.getStartDateFormat();
          String e = this.getEndDateFormat();
          
          getapprovals(this.getCat(),s,e);
          
           
     }
   
 
      public void loadtable(String cat){
          
         PreparedStatement pst1=null;
         ResultSet rs1 = null;
         con = DBconnect.connect();
        // String start = getStartDateFormat();
         // end = getEndDateFormat();
        
         if(null == cat){}
         else switch (cat) {
            case "Administration Expenses":
                try
                {
                    
                    String sql;
                    sql = "SELECT ExpenseID,Category,Amount,Approval,Date FROM adminexpenses";
                    pst1 = con.prepareStatement(sql);
                    rs1 = pst1.executeQuery(sql);
                    
                    jTable1.setModel(DbUtils.resultSetToTableModel(rs1));
                    //JOptionPane.showMessageDialog(null,"Successfull");
                    
                }
                
                catch(SQLException e)
                {
                    System.out.println(e);
                    JOptionPane.showMessageDialog(null,"UN-Successfull");
                }
                break;
            case "Maintenance Exp":
                try
                {
                    
                    String sql;
                    sql = "SELECT ExpenseID,Category,Amount,Approval,Date FROM maintainexp";
                    pst1 = con.prepareStatement(sql);
                    rs1 = pst1.executeQuery(sql);
                    jTable1.setModel(DbUtils.resultSetToTableModel(rs1));
                    //JOptionPane.showMessageDialog(null,"Successfull");
                    
                }
                
                catch(SQLException e)
                {
                    System.out.println(e);
                    JOptionPane.showMessageDialog(null,"UN-Successfull");
                }
                break;
            case "Petty Cash Expenses":
                try
                {
                    
                    String sql;
                    sql = "SELECT ExpenseID,Category,Amount,Approval,Date FROM pettycashexp";
                    pst1 = con.prepareStatement(sql);
                    rs1 = pst1.executeQuery(sql);
                    jTable1.setModel(DbUtils.resultSetToTableModel(rs1));
                    //JOptionPane.showMessageDialog(null,"Successfull");
                    
                }
                
                catch(SQLException e)
                {
                    System.out.println(e);
                    JOptionPane.showMessageDialog(null,"UN-Successfull");
                }
                break;
            case "Other Expenses":
                try
                {
                    
                    String sql;
                    sql = "SELECT ExpenseID,Category,Amount,Approval,Date FROM otherexp";
                    pst1 = con.prepareStatement(sql);
                    rs1 = pst1.executeQuery(sql);
                    jTable1.setModel(DbUtils.resultSetToTableModel(rs1));
                    //JOptionPane.showMessageDialog(null,"Successfull");
                    
                }
                
                catch(SQLException e)
                {
                    System.out.println(e);
                    JOptionPane.showMessageDialog(null,"UN-Successfull");
                }
                break;
            default:
                break;
        }
    
}
      private void showTable(){
          
          loadtable(this.getCat());
      }
    
    
    String getCat(){
      
        String a = jComboBox1.getSelectedItem().toString() ;
        return a;
    }
    
 String getEndDate()
{
   String x = this.jDateChooser2.getDate().toString();
   System.out.println(x);

   char []arr = new char[50];
   
   x.getChars(8,11,arr,0);
   x.getChars(9,12,arr,1);
   
   char y = arr[0];
   char n = arr[1];
   
   String date1 = String.valueOf(y);
   String date2 = String.valueOf(n);
   
   String date = date1.concat(date2);
   
   System.out.println(date);
   
    //filltxtFields(r,b,d);
    return date;
}
    
String getStartDate()
{
   String x = this.jDateChooser1.getDate().toString();
   System.out.println(x);

   char []arr = new char[50];
   
   x.getChars(8,11,arr,0);
   x.getChars(9,12,arr,1);
   
   char y = arr[0];
   char n = arr[1];
   
   String date1 = String.valueOf(y);
   String date2 = String.valueOf(n);
   
   String date = date1.concat(date2);
   
   System.out.println(date);
   
    //filltxtFields(r,b,d);
    return date;
}

String getMonthStart(){
    
   String x = this.jDateChooser1.getDate().toString();
   System.out.println(x);

   char []arr = new char[50];
   
   x.getChars(4,7,arr,0);
   x.getChars(5,8,arr,1);
   x.getChars(6,9,arr,2);
   
   char y = arr[0];
   char n = arr[1];
   char c = arr[2];
   
   String m1 = String.valueOf(y);
   String m2 = String.valueOf(n);
   String m3 = String.valueOf(c);
   
   String mn1 = m1.concat(m2);
   String mf = mn1.concat(m3);
   
   System.out.println(mf);
   
    //filltxtFields(r,b,d);
    return mf;
}
    
String getMonthEnd(){
    
   String x = this.jDateChooser2.getDate().toString();
   System.out.println(x);

   char []arr = new char[50];
   
   x.getChars(4,7,arr,0);
   x.getChars(5,8,arr,1);
   x.getChars(6,9,arr,2);
   
   char y = arr[0];
   char n = arr[1];
   char c = arr[2];
   
   String m1 = String.valueOf(y);
   String m2 = String.valueOf(n);
   String m3 = String.valueOf(c);
   
   String mn1 = m1.concat(m2);
   String mf = mn1.concat(m3);
   
   System.out.println(mf);
   
    //filltxtFields(r,b,d);
    return mf;
}

 private String getStartDateFormat(){
     
     //String SDate = this.jDateChooser1.getDate().toString();
     
     SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
     
     String date1 = sdf.format(this.jDateChooser1.getDate());
     
     System.out.println(date1);
     
     return date1;
 }
 
 private String getEndDateFormat(){
     //String EDate = this.jDateChooser2.getDate();
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
     
     String date1 = sdf.format(this.jDateChooser2.getDate());
     
     System.out.println(date1);
      
     return date1;
 }
 
 private void resetTable(){
     
     DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
     //jTable1.setModel(model);
     model.setRowCount(0);
     
 }
/*
 private int getCorectStrtrow(int row,int lrow){
     row = 0;
     int Crow = -1;
     while(row <= lrow){
        
          String date=jTable1.getValueAt(row,4).toString();
                 
           // if (date == getStartDateFormat())
           {
              Crow = row;
            }
            row++;
    }
     return Crow;
 }
  private int getCorectEndrow(int row,int lrow){
     row = 0;
     int Crow =-1;
     while(row <= lrow){
        
          String date=jTable1.getValueAt(row,4).toString();
                 
            if (date == getEndDateFormat()){
              Crow = row;
            }
            row++;
     }
     return Crow;
 }
 private void loadT(int strt,int end){
     jTable1.addRowSelectionInterval(strt, end);
 }
   */
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Approval.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Approval.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Approval.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Approval.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Approval().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    public javax.swing.JComboBox<String> jComboBox1;
    public com.toedter.calendar.JDateChooser jDateChooser1;
    public com.toedter.calendar.JDateChooser jDateChooser2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JTable jTable1;
    public javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

     public void getapprovals(String cat,String start,String end){
       
       //Approval n = new Approval(); 
      
       Connection con1 = null;
       PreparedStatement pst1=null;
       con1 = DBconnect.connect();
       ResultSet rs = null;
       //int num = n.jTable1.getColumnCount();
       //int i;
       
       
      try{
              
       if ("Administration Expenses".equals(cat)){
        try
        {
            String s = "SELECT `ExpenseID`,`Category`,`Method`,`Approval`,`Date` FROM `adminexpenses` WHERE `Date` >= any (SELECT `Date` FROM `adminexpenses` WHERE `Date` >= '"+start+"') AND `Date` <= any (SELECT `Date` FROM `adminexpenses` WHERE `Date` <= '"+end+"')";
            pst1 = con1.prepareStatement(s);
            //pst1.execute(s);
            rs = pst1.executeQuery();
            jTable1.setModel(DbUtils.resultSetToTableModel(rs));
            JOptionPane.showMessageDialog(null,"Successfull");
            
            
        }
        
    catch(SQLException e)
                {
                    System.out.println(e);
                    JOptionPane.showMessageDialog(null,"UN-Successfull");
                }
        
       }
       else if(cat == "Maintenance Expenses"){
        
        
             try
        {
            
            String s = "SELECT `ExpenseID`,`Category`,`Method`,`Approval`,`Date` FROM `maintainexp` WHERE `Date` >= any (SELECT `Date` FROM `maintainexp` WHERE `Date` >= '"+start+"') AND `Date` <= any (SELECT `Date` FROM `maintainexp` WHERE `Date` <= '"+end+"')";
            pst1 = con1.prepareStatement(s);
            //pst1.execute();
            rs = pst1.executeQuery(s);
            jTable1.setModel(DbUtils.resultSetToTableModel(rs));
            JOptionPane.showMessageDialog(null,"Successfull");
            
        }
        
    catch(SQLException e)
                {
                    System.out.println(e);
                    JOptionPane.showMessageDialog(null,"Un-Successfull");
                }
       }
       
       else if (cat == "Petty Cash Expenses"){
               try
        {
            String s = "SELECT `ExpenseID`,`Category`,`Method`,`Approval`,`Date` FROM `pettycashexp` WHERE `Date` >= any (SELECT `Date` FROM `pettycashexp` WHERE `Date` >= '"+start+"') AND `Date` <= any (SELECT `Date` FROM `pettycashexp` WHERE `Date` <= '"+end+"')";
            pst1 = con1.prepareStatement(s);
            //pst1.execute();
            rs = pst1.executeQuery(s);
            jTable1.setModel(DbUtils.resultSetToTableModel(rs));
            JOptionPane.showMessageDialog(null,"Entry Successfull");
            
        }
        
    catch(SQLException e)
                {
                    System.out.println(e);
                    JOptionPane.showMessageDialog(null,"Successfull");
                }
       }
       
       else if (cat == "Other Expenses"){
               try
        {
            String s = "SELECT `ExpenseID`,`Category`,`Method`,`Approval`,`Date` FROM `otherexp` WHERE `Date` >= any (SELECT `Date` FROM `otherexp` WHERE `Date` >= '"+start+"') AND `Date` <= any (SELECT `Date` FROM `otherexp` WHERE `Date` <= '"+end+"')";
            pst1 = con1.prepareStatement(s);
            //pst1.execute();
            rs = pst1.executeQuery(s);
            jTable1.setModel(DbUtils.resultSetToTableModel(rs));
            JOptionPane.showMessageDialog(null,"Successfull");
            
        }
        
    catch(SQLException e)
                {
                    System.out.println(e);
                    JOptionPane.showMessageDialog(null,"Un-Successfull");
                }
       }
       else{
           JOptionPane.showMessageDialog(null,"UN-Successfull - Invalid Category");
       }
      }
      catch (Exception e){
          System.out.println(e);
      }
   }
}
